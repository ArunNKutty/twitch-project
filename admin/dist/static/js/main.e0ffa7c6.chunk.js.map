{"version":3,"sources":["neoflix-logo.png","components/Movie.tsx","views/Home.tsx","views/Movie.tsx","components/cypher-table/cell.tsx","components/cypher-table/results.tsx","components/cypher-table/index.tsx","views/Genres.tsx","views/GenreEdit.tsx","utils.ts","views/Packages.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Movie","props","movie","labels","map","label","Label","key","properties","Card","style","width","Image","src","poster","Content","Header","to","identity","toNumber","title","Meta","year","Description","plot","substr","extra","Icon","name","imdbRating","SearchResults","useReadCypher","loading","records","error","run","useEffect","results","row","get","Grid","Column","Loader","Message","negative","message","length","columns","doubling","Row","stretched","maxWidth","Home","useState","query","setQuery","Container","Segment","Form","Field","htmlFor","type","value","onChange","e","target","EditMovie","setError","confirmation","setConfirmation","setTitle","setPlot","useLazyWriteCypher","updateMovie","positive","id","Button","primary","onClick","preventDefault","updates","then","res","toString","catch","match","int","params","first","height","Dimmer","active","CypherTableCell","index","Table","Cell","link","circular","inverted","rounded","color","icon","size","float","marginRight","marginTop","marginBottom","Subheader","caption","text","CypherTableOverview","textAlign","number","CypherTableCount","content","slice","l","className","class","plus","CypherTableLabels","CypherTableAction","JSON","stringify","CypherTableResults","headers","keys","HeaderCell","startsWith","cells","Body","CypherTable","limit","cypher","Packages","GenreEdit","fields","meta","fetch","property","metaData","Object","entries","fieldType","EditField","url","URL","window","location","href","publicPathTo","append","protocol","includes","pathname","split","alt","App","Menu","pointing","fixed","padding","Item","as","Link","logo","exact","path","component","Genres","version","Boolean","hostname","driver","createDriver","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e0ffa7c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/neoflix-logo.1383c259.png\";","import React from 'react'\nimport { Card, Image, Label, Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { Node } from 'neo4j-driver'\n\ninterface MovieProps {\n    movie: Node\n}\n\nexport default function Movie(props: MovieProps) {\n    const { movie } = props\n    const labels = movie.labels.map(label => <Label key={label}>{label}</Label>)\n\n    const properties: Record<string, any> = movie.properties\n\n    return (\n        <Card style={{ width: '100%', 'maxWidth': 'auto', 'marginBottom': '24px' }}>\n            <Image src={properties.poster} />\n            <Card.Content>\n                <Card.Header>\n                    <Link to={`/movie/${movie.identity.toNumber()}`}>\n                        {properties.title}\n                    </Link>\n                </Card.Header>\n                <Card.Meta>\n                    <div>{labels}</div>\n                    {properties.year && `Released in ${properties.year.toNumber()}`}\n                </Card.Meta>\n                <Card.Description>\n                    {properties.plot?.substr(0, 100)}&hellip;\n                    </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {properties.imdbRating}\n            </Card.Content>\n        </Card>\n    )\n}\n\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react'\nimport { Container, Form, Grid, Segment, Loader, Card, Message } from 'semantic-ui-react'\n\nimport { useReadCypher } from 'use-neo4j';\nimport Movie from '../components/Movie'\n\ninterface SearchResultsProps {\n    query: string;\n}\n\nconst SearchResults = (props: SearchResultsProps) => {\n    const { loading, records, error, run, } = useReadCypher('MATCH (m:Movie) WHERE m.title CONTAINS $query RETURN m LIMIT 12', props)\n\n    useEffect(() => {\n        run(props)\n    }, [ props ])\n\n    const results = records?.map(row => {\n        const movie = row.get('m')\n\n        return (\n            <Grid.Column key={movie.identity.toNumber()}>\n                <Movie movie={movie} />\n            </Grid.Column>\n        )\n    })\n\n    if ( loading ) return <Loader />\n\n    else if ( error ) return <Message negative>{ error.message }</Message>\n\n    else if ( !records?.length )  {\n        return <Card style={{ width: '100%', maxWidth: 'auto' }}><Card.Content>No results found</Card.Content></Card>\n    }\n\n    return (\n        <Grid columns={3} doubling>\n            <Grid.Row stretched>\n                {results}\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nexport default function Home() {\n    const [ query, setQuery ] = useState<string>('')\n\n    return (\n        <Container>\n            <Segment>\n                <Form>\n                    <Form.Field>\n                        <label htmlFor=\"query\">Search by title</label>\n                        <input type=\"text\" value={query} onChange={e => setQuery(e.target.value)} />\n                    </Form.Field>\n                </Form>\n            </Segment>\n            <SearchResults query={query} />\n        </Container>\n    )\n}","import React, { useState } from 'react'\nimport { useLazyWriteCypher, useReadCypher } from 'use-neo4j'\nimport { int } from 'neo4j-driver'\nimport { Container, Dimmer, Segment, Loader, Header, Form, Button, Message } from 'semantic-ui-react'\n\n\nfunction EditMovie({ movie }) {\n    const [ error, setError ] = useState<Error>()\n    const [ confirmation, setConfirmation ] = useState<string>()\n    const [ title, setTitle ] = useState(movie.properties.title)\n    const [ plot, setPlot ] = useState(movie.properties.plot)\n\n    const [ updateMovie ] = useLazyWriteCypher(`MATCH (m:Movie) WHERE id(m) = $id SET m += $updates, m.updatedAt = datetime() RETURN m.updatedAt as updatedAt`)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        updateMovie({ id: movie.identity, updates: { title, plot } })\n            .then(res => {\n                res && setConfirmation(`Node updated at ${res.records[0].get('updatedAt').toString()}`)\n            })\n            .catch(e => setError(e))\n    }\n\n    return (\n        <Form>\n            {confirmation && <Message positive>{confirmation}</Message>}\n            {error && <Message negative>{error.message}</Message>}\n\n            <Form.Field>\n                <label htmlFor=\"title\">Title</label>\n                <input id=\"title\" value={title} onChange={(e => setTitle(e.target.value))} />\n            </Form.Field>\n            <Form.Field>\n                <label htmlFor=\"plot\">Plot</label>\n                <textarea id=\"plot\" value={plot} onChange={(e => setPlot(e.target.value))} />\n            </Form.Field>\n            <Button primary onClick={handleSubmit}>Submit</Button>\n        </Form>\n    )\n}\n\nexport default function Movie({ match }) {\n    const { loading, first } = useReadCypher(\n        'MATCH (m:Movie) WHERE id(m) = $id RETURN m',\n        { id: int(match.params.id) }\n    )\n\n    if (loading) {\n        return (\n            <Segment style={{ height: 500 }}>\n                <Dimmer active>\n                    <Loader />\n                </Dimmer>\n            </Segment>\n        )\n    }\n\n    const movie = first?.get('m')\n\n    if ( !movie ) {\n        return (\n            <Message negative>Movie with ID {match.params.id} not found...</Message>\n        )\n    }\n\n    return (\n        <Container>\n            <Header>{movie.properties.title}</Header>\n            <EditMovie movie={movie} />\n        </Container>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Header, Icon, Label, Table } from 'semantic-ui-react'\n\ntype CypherTableCell = 'overview' | 'count' | 'labels' | 'action' | string\n\ninterface CypherTableCellProps {\n    key: CypherTableCell;\n    index: number;\n    value: Record<string, any>;\n}\n\nexport function CypherTableCell(props: CypherTableCellProps) {\n    const { key, index, value } = props\n    const { type } = value\n\n    if ( type === 'overview' ) return CypherTableOverview({ key: key + index, value })\n    else if ( type === 'count' ) return CypherTableCount({ key: key + index, value })\n    else if ( type === 'labels' ) return CypherTableLabels({ key: key + index, value })\n    else if ( type === 'action' ) return CypherTableAction({ key: key + index, value })\n\n    return <Table.Cell key={key+index}><pre>{ JSON.stringify(value, null, 2) }</pre></Table.Cell>\n}\n\n\nfunction CypherTableOverview({ key, value }) {\n    return (\n        <Table.Cell key={key}>\n            <Link to={value.link}>\n                <Icon circular inverted rounded={true} color='teal' name={value.icon} size='large' style={{float: 'left', marginRight: '6px'}} />\n\n                <Header style={{marginTop: 0, marginBottom: 0}}>{value.name}</Header>\n                <Header.Subheader>\n                    <Icon name={value.caption.icon} size='small' />\n                    {value.caption.text}\n                </Header.Subheader>\n            </Link>\n        </Table.Cell>\n    )\n}\n\nfunction CypherTableCount({ key, value }) {\n    return (\n        <Table.Cell key={key} textAlign=\"right\">\n            <Icon name={value.icon} size=\"big\" />\n            {value.number?.toNumber()}\n        </Table.Cell>\n    )\n}\n\nfunction CypherTableLabels({ key, value }) {\n    const { labels } = value\n\n    const limit = 5\n    const length = labels.length\n\n    const content = labels.slice(0, limit).map(l => (\n        <Link key={key + l.text} to={l.link}>\n            <Label className={l.class}>{l.text}</Label>\n        </Link>\n    ))\n    const plus = length > limit ? ` +${length - limit}` : ''\n\n    return (\n        <Table.Cell key={key}>\n            {content} {plus}\n        </Table.Cell>\n    )\n}\n\nfunction CypherTableAction({ key, value }) {\n    return (\n     <Table.Cell key={key} textAlign=\"right\">\n         <Link to={value.link} className={value.class}>\n             {value.icon && <Icon name={value.icon} />}\n             {value.text}\n         </Link>\n     </Table.Cell>\n    )\n}\n","import React from 'react'\nimport { Record as Neo4jRecord }  from 'neo4j-driver'\nimport { CypherTableCell } from './cell'\nimport { Table } from 'semantic-ui-react'\n\ninterface CypherTableResultsProps {\n    records: Neo4jRecord[];\n}\n\nexport default function CypherTableResults(props: CypherTableResultsProps) {\n    const { records } = props\n\n    const headers = records[0].keys.map(key => <Table.HeaderCell key={key}>{key.startsWith('action') ? '' : key}</Table.HeaderCell>)\n    const results = records.map((row, index) => {\n        const cells = row.keys.map(key => CypherTableCell({ key, index, value: row.get(key) }))\n\n        return (\n        <Table.Row key={index}>\n            {cells}\n        </Table.Row>\n        )\n    })\n\n    return (\n        <Table>\n            <Table.Header>\n                <Table.Row>\n                {headers}\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {results}\n            </Table.Body>\n        </Table>\n    )\n\n\n}","import React, { useEffect, useState } from \"react\"\nimport { Container, Form, Loader, Message, Segment } from \"semantic-ui-react\"\nimport { int, useReadCypher } from \"use-neo4j\"\nimport CypherTableResults from './results'\n\ninterface CypherTableProps {\n    cypher: string; // MATCH (m:Movie) WHERE m.title CONTAINS $query RETURN m\n    limit?: number;\n}\nexport default function CypherTable(props: CypherTableProps) {\n    const [ query, setQuery ] = useState<string>('')\n    const limit = int(props.limit || 10)\n    const { error, loading, records, run } = useReadCypher(props.cypher, { query: '', limit })\n\n    // eslint-disable-next-line\n    useEffect(() => { run({ query, limit }) }, [ query ])\n\n    let results = <div>Loading...</div>\n\n    if (records && !records.length) {\n        results = <div>No results found for <strong>{query}</strong></div>\n    }\n    else if (records && records.length) {\n        results = <CypherTableResults records={records} />\n    }\n    else if (error) {\n        results = <Message negative>{error.message}</Message>\n    }\n    else if (loading) {\n        results = <Loader />\n    }\n\n\n    return (<Container>\n        <Segment>\n            <Form>\n                <Form.Field>\n                    <label htmlFor=\"query\">Search</label>\n                    <input type=\"text\" value={query} onChange={e => setQuery(e.target.value)} />\n                </Form.Field>\n            </Form>\n        </Segment>\n        {results}\n    </Container>)\n\n}","import React from 'react'\nimport CypherTable from '../components/cypher-table'\n\nexport default function Packages() {\n    const cypher = `\n        MATCH (g:Genre)\n        WHERE g.name CONTAINS $query\n        RETURN\n            {\n            type: 'overview',\n            link: '/genres/'+ g.id,\n            name: g.name,\n            icon: 'fire',\n            caption: {\n                icon: 'film',\n                text:  size((g)<-[:IN_GENRE]-())  +' movies'\n            }\n            }  AS Genre,\n            {\n            type: 'labels',\n            labels: [ (p)-[:PROVIDES_ACCESS_TO]->(g) | {\n                text: p.name,\n                class: 'label--'+ apoc.text.slug(toLower(g.name)),\n                link: '/packages/'+ p.id\n            } ]\n            } AS Packages,\n            {\n                type: 'action',\n                class: 'ui primary basic button',\n                text: 'Edit',\n                icon: 'pencil',\n                link: '/genres/'+ g.id\n            } AS actionEdit\n        ORDER BY g.name\n        LIMIT 10\n    `\n\n\n    return (\n        <CypherTable cypher={cypher} />\n\n    )\n}","/* eslint-disable */\nimport React from 'react'\nimport { Container, Form, Header, Loader, Segment } from 'semantic-ui-react'\nimport { int, useReadCypher } from 'use-neo4j'\nimport CypherTable from '../components/cypher-table'\n\nfunction useEditForm({ label, params }) {\n    // const properties =\n\n}\n\n\n\nfunction EditField({ name, type, value }) {\n    let fieldType = 'text'\n\n    switch (type) {\n        case 'FLOAT':\n        case 'INTEGER':\n            fieldType = 'number'\n            break;\n\n        case 'DATE':\n            fieldType = 'date';\n            break;\n\n        case 'DATE_TIME':\n            fieldType = 'datetime';\n            break;\n    }\n\n    return (\n        <Form.Field key={name}>\n            <label htmlFor={name}>{name} - {type}</label>\n            <input type={fieldType} id={name} value={value} />\n        </Form.Field>\n    )\n}\n\nexport default function GenreEdit() {\n    const label = 'Movie'\n    const property = 'title'\n    const value = 'Casino'\n    const title = 'title'\n\n    const meta = useReadCypher(`\n        CALL apoc.meta.schema({ labels: [ $label ] })\n    `, { label })\n\n    const fetch = useReadCypher(`MATCH (n:${label}) WHERE n[ $property ] = $value RETURN n`, { property, value })\n\n    if (meta.loading || fetch.loading) return <Loader />\n\n\n    let fields\n    let properties = {}\n\n    const metaData = meta.first?.get('value')[ label ]\n\n\n    if ( fetch?.first ) {\n        properties = fetch.first.get('n').properties\n    }\n    else {\n    }\n\n\n\n    if ( metaData && metaData.properties ) {\n\n        // @ts-ignore\n        fields = Object.entries(metaData.properties).map(([ name, row ]) => EditField({ name, ...row, value: properties && properties[ name ] }))\n    }\n\n\n\n    return (\n        <Container>\n            <Segment>\n            <Form>\n                <Header>{properties[ title ]}</Header>\n                {fields}\n            </Form>\n    <pre>{JSON.stringify(properties, null, 2)}</pre>\n    <pre>{JSON.stringify(metaData, null, 2)}</pre>\n            </Segment>\n        </Container>\n    )\n\n}","const url = new URL(window.location.href)\n\nexport const publicPathTo = (append: string): string => {\n    if ( url.protocol.includes('http') ) return `/${append}`\n\n    return `${url.protocol}//${url.pathname.split('/dist/')[0]}/dist/${append}`\n}","import React from 'react'\nimport CypherTable from '../components/cypher-table'\nimport { publicPathTo } from '../utils'\n\nexport default function Packages() {\n    const cypher = `\n        MATCH (p:Package)\n        WHERE p.name CONTAINS $query\n        RETURN\n            {\n                type: 'overview',\n                link: '/packages/'+ p.id,\n                name: p.name,\n                icon: 'box',\n                caption: {\n                    icon: 'dollar sign',\n                    text:  p.price + ' for '+ p.duration.days +' days'\n                }\n            }  AS Package,\n            {\n                type: 'labels',\n                labels: [ (p)-[:PROVIDES_ACCESS_TO]->(g) | {\n                    text: g.name,\n                    class: 'label--'+ apoc.text.slug(toLower(g.name)),\n                    link: '/genres/'+ g.id\n                } ]\n                } AS Genres,\n            {\n                type: 'count',\n                //icon: 'users',\n                number: size((p)<-[:FOR_PACKAGE]-())\n            } AS Subscribers,\n            {\n                type: 'action',\n                class: 'ui primary basic button',\n                text: 'Edit',\n                icon: 'pencil',\n                link: '/packages/'+ p.id\n            } AS actionEdit\n        ORDER BY p.name\n        LIMIT $limit\n    `\n\n    return (\n        <div>\n            <pre>{publicPathTo('logo512.png')}</pre>\n            <img src={publicPathTo('logo512.png')} alt=\"logo\" />\n            <CypherTable cypher={cypher} limit={10} />\n        </div>\n    )\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nimport './App.css';\nimport logo from './neoflix-logo.png'\n\nimport { Container, Menu } from 'semantic-ui-react';\n\nimport Home from './views/Home'\nimport Movie from './views/Movie'\nimport Genres from './views/Genres'\nimport GenreEdit from './views/GenreEdit'\nimport Packages from './views/Packages'\n\nimport { version } from '../package.json'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Menu inverted pointing fixed=\"top\" style={{ padding: '1em 0'}}>\n          <Container>\n          <Menu.Item as={Link} to=\"/\" style={{padding: '0 1em 0 0'}}><img src={logo} alt=\"Neoflix\" style={{width: '6em'}} /></Menu.Item>\n          <Menu.Item as={Link} to=\"/\"><strong>Admin Graph App</strong></Menu.Item>\n          <Menu.Item as={Link} to=\"/genres\">Genres</Menu.Item>\n          <Menu.Item as={Link} to=\"/packages\">Packages</Menu.Item>\n          </Container>\n        </Menu>\n        <main className=\"ui main container\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/movie/:id\" component={Movie} />\n            <Route exact path=\"/genres\" component={Genres} />\n            <Route path=\"/genres/:id\" component={GenreEdit} />\n            <Route exact path=\"/packages\" component={Packages} />\n          </Switch>\n        </main>\n      </Router>\n\n      <footer>\n        <Container>\n          <pre>{version}</pre>\n        </Container>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Neo4jProvider,\n  createDriver\n} from 'use-neo4j'\n\nconst driver = createDriver('neo4j', 'localhost', 7687, 'neo4j', 'neo')\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Neo4jProvider driver={driver}>\n      <App />\n    </Neo4jProvider>\n\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}